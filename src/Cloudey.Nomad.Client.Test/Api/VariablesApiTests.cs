/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Cloudey.Nomad.Client.Client;
using Cloudey.Nomad.Client.Api;
// uncomment below to import models
//using Cloudey.Nomad.Client.Model;

namespace Cloudey.Nomad.Client.Test.Api
{
    /// <summary>
    ///  Class for testing VariablesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class VariablesApiTests : IDisposable
    {
        private VariablesApi instance;

        public VariablesApiTests()
        {
            instance = new VariablesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of VariablesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' VariablesApi
            //Assert.IsType<VariablesApi>(instance);
        }

        /// <summary>
        /// Test DeleteVariable
        /// </summary>
        [Fact]
        public void DeleteVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //Variable variable = null;
            //string? region = null;
            //string? _namespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //int? cas = null;
            //instance.DeleteVariable(path, variable, region, _namespace, xNomadToken, idempotencyToken, cas);
        }

        /// <summary>
        /// Test GetVariableQuery
        /// </summary>
        [Fact]
        public void GetVariableQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string? region = null;
            //string? _namespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //var response = instance.GetVariableQuery(path, region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            //Assert.IsType<Variable>(response);
        }

        /// <summary>
        /// Test GetVariablesListRequest
        /// </summary>
        [Fact]
        public void GetVariablesListRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? region = null;
            //string? _namespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //var response = instance.GetVariablesListRequest(region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            //Assert.IsType<List<VariableMetadata>>(response);
        }

        /// <summary>
        /// Test PostVariable
        /// </summary>
        [Fact]
        public void PostVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //Variable variable = null;
            //string? region = null;
            //string? _namespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //int? cas = null;
            //var response = instance.PostVariable(path, variable, region, _namespace, xNomadToken, idempotencyToken, cas);
            //Assert.IsType<Variable>(response);
        }

        /// <summary>
        /// Test PutVariable
        /// </summary>
        [Fact]
        public void PutVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //Variable variable = null;
            //string? region = null;
            //string? _namespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //int? cas = null;
            //var response = instance.PutVariable(path, variable, region, _namespace, xNomadToken, idempotencyToken, cas);
            //Assert.IsType<Variable>(response);
        }
    }
}
